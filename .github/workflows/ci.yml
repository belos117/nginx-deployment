name: CI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_TOKEN: ${{ secrets.TF_TOKEN }}
      ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
      HOST_IP: ${{ secrets.HOST_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install Github cli
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
          && sudo mkdir -p -m 755 /etc/apt/keyrings \
          && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
          && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Authenticate AWS
        uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_KEY }}"
          aws-region: eu-west-2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
      - name: Terraform Apply
        id: apply
        run: |
          cd app-server/
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve

      - name: Debug Terraform output
        run: |
          cd app-server/
          terraform output
          terraform show

      - name: Get Instance IP
        id: parse_output
        run: |
          cd app-server/
          IP=$(terraform output -raw instance_public_ip)
          echo "Raw output: $(terraform output -json)"
          echo "Server IP: $IP"
          echo "HOST_IP=$IP" >> $GITHUB_OUTPUT

      - name: Add HOST IP to inventory file
        run: |
          sudo echo $HOST_IP > /home/runner/work/nginx-deployment/nginx-deployment/playbooks/inventory.ini
        env:
          HOST_IP: ${{ steps.parse_output.outputs.HOST_IP }}

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          sudo echo ${{ secrets.SSH_PRIVATE_KEY }} > ~/.ssh/private_key.pem
          sudo chmod 600 ~/.ssh/private_key.pem

      - name: Wait for instance to be ready
        run: |
          echo "Waiting for instance to initialize..."
          sleep 60

      - name: Run Ansible playbook
        run: |
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i playbooks/inventory.ini playbooks/deploy-server.yml --private-key ~/.ssh/private_key.pem -u ubuntu -vvv

      - name: Check EC2 instance state
        run: |
          aws ec2 describe-instances --instance-ids $(terraform output -raw instance_id) --query 'Reservations[].Instances[].State.Name' --output text
