name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_TOKEN: ${{ secrets.TF_TOKEN }}
      ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
      HOST_IP: ${{ secrets.HOST_IP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to the latest

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Authenticate AWS
        uses: actions/setup-node@v4
        with:
          node-version: "14"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_KEY }}"
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
      - name: Terraform Apply
        id: apply
        run: |
          cd app-server/
          terraform init
          terraform apply -auto-approve

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set default.region eu-west-2

      - name: Get instance IP from Terraform
        id: get-ip
        run: |
          cd app-server/
          # Get IP using json format and parse with jq
          IP=$(terraform output -json instance_public_ip | jq -r '.[0]')

          if [ -z "$IP" ] || [ "$IP" = "null" ]; then
            echo "Error: Could not get instance IP from Terraform output"
            exit 1
          fi

          # Set IP in environment and output
          echo "HOST_IP=$IP" >> $GITHUB_ENV
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $IP"

      - name: Verify IP
        run: |
          if [ -z "${{ env.HOST_IP }}" ]; then
            echo "HOST_IP is not set"
            exit 1
          fi
          echo "Successfully set HOST_IP to ${{ env.HOST_IP }}"
          # Add delay to ensure instance is ready
          sleep 30

      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/mykey
          chmod 600 ~/.ssh/mykey
          echo "Running ssh-keyscan for ${{ env.HOST_IP }}"
          # Add verbose output and multiple attempts
          for i in {1..3}; do
            echo "Attempt $i to scan host key..."
            ssh-keyscan -v -H "${{ env.HOST_IP }}" >> ~/.ssh/known_hosts && break || {
              if [ $i -eq 3 ]; then
                echo "Failed to scan host key after 3 attempts"
                exit 1
              fi
              sleep 10
            }
          done

      - name: Debug Environment
        run: |
          echo "Checking environment variables..."
          echo "ANSIBLE_USER is set: ${{ env.ANSIBLE_USER != '' }}"
          echo "HOST_IP is: ${{ env.HOST_IP }}"

      - name: Test SSH Connection
        env:
          ANSIBLE_USER: ${{ secrets.ANSIBLE_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/mykey ubuntu@3.8.181.156" "echo 'SSH connection successful'"